/*---------------------------------------------------------
 Mixins (_utility.scss)
-------------------------------------------------------- */
@mixin transition-all($time) {
	-webkit-transition: all $time;
	-moz-transition: all $time;
	-ms-transition: all $time;
	-o-transition: all $time;
	transition: all $time;
}
	
/*@mixin clearfix {	
	&:before,
	&:after {
		content: " "; 
		display: table;
	}	
	&:after {
		clear: both;
	}
}*/

@mixin hidden { //Hide for both screenreaders and browsers
	display: none;
	visibility: hidden; }

@mixin visuallyhidden { //Hide only visually, but have it available for screenreaders
	position : absolute;
	clip : rect(0 0 0 0); 
	overflow : hidden;
	margin: -1px;
	padding : 0;
	height : 1px;      
	width : 1px;
	border : 0; }

@mixin image-replace {
	font: 0/0 a;
	text-shadow: none;
	color: transparent;
	text-decoration: none;
}

@mixin no-select {
	-webkit-user-select: none;
	   -moz-user-select: none;
	   	-ms-user-select: none;
	   		user-select: none;
}

@mixin border-radius($radius: 3px) {
	-webkit-border-radius: $radius;
		 -moz-border-radius: $radius;
			  border-radius: $radius;
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
	@if $inset {
		-webkit-box-shadow:inset $top $left $blur $color;
		-moz-box-shadow:inset $top $left $blur $color;
		box-shadow:inset $top $left $blur $color;
	} @else {
		-webkit-box-shadow: $top $left $blur $color;
		-moz-box-shadow: $top $left $blur $color;
		box-shadow: $top $left $blur $color;
	}
}

@mixin background-cover {
	-webkit-background-size: cover;
	-moz-background-size: cover;
	-o-background-size: cover;
	background-size: cover;
}

@mixin placeholder-color($color) {
	
	::-webkit-input-placeholder {
		color:    $color;
	}
	:-moz-placeholder {
		color:    $color;
	}
	::-moz-placeholder {
		color:    $color;
	}
	:-ms-input-placeholder {
		color:    $color;
	}
}

@mixin for($media) {
	@if $media == small-screens {
		@media screen and (min-width: $one) { @content; }
	}
	@else if $media == medium-screens {
		@media screen and (min-width: $two) { @content; }
	}
	@else if $media == large-screens {
		@media screen and (min-width: $three) { @content; }
	}
}

@mixin smart-margin($margin) {
	margin:{
		top: $margin;
		bottom: $margin;
	}
	&:first-child {
		margin-top: 0;
	}
	&:last-child {
		margin-bottom: 0;
	}
}

@mixin link-recolor($color, $hover){
	color: $color;
	&:visited {
		color: $color;
	}
	&:hover {
		color: $hover;
	}
}

@mixin pseudo-shape($h : 1px) {
	content:  '';
	display: block;
	width: 100%;
	height: $h;
	position: absolute;
}

@mixin grayscale($hover : true) {
	-webkit-filter: grayscale(1);
	-webkit-filter: grayscale(100%);
	-moz-filter: grayscale(100%);
	filter: gray;	
	filter: url("data:image/svg+xml;utf8,<svg version='1.1' xmlns='http://www.w3.org/2000/svg' height='0'><filter id='greyscale'><feColorMatrix type='matrix' values='0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0' /></filter></svg>#greyscale");
	filter: grayscale(100%);
	
	@if $hover {
		&:hover {
			-webkit-filter: grayscale(0);
			-webkit-filter: grayscale(0%);
			-moz-filter: grayscale(0%);
			filter: none;
		}
	}
}




/*---------------------------------------------------------
 Rem (_utility.scss)
-------------------------------------------------------- */
$em-base: 10px;
$baseline-px: 10px;

@mixin rem($property, $px-values) {
	// Convert the baseline into rems
	$baseline-rem: $baseline-px / 1rem;
	// Print the first line in pixel values
	#{$property}: $px-values;
	// If there is only one (numeric) value, return the property/value line for it.
	@if type-of($px-values) == "number" {
		#{$property}: $px-values / $baseline-rem; }
	@else {
		// Create an empty list that we can dump values into
		$rem-values: unquote("");
		@each $value in $px-values {
			// If the value is zero, return 0
			@if $value == 0 {
				$rem-values: append($rem-values, $value); }
			@else {
				$rem-values: append($rem-values, $value / $baseline-rem); } }
		// Return the property and its list of converted values
		#{$property}: $rem-values; }
}


/*---------------------------------------------------------
 Helpers (_utility.scss)
-------------------------------------------------------- */
/*.align-left
.alignleft,
.entry-thumbnail.thumbnail {
	display: inline;
	float: left;
	margin: 0 1.5em 1.5em 0;
}

.align-right,
.alignright {
	display: inline;
	float: right;
	margin: 0 0 1.5em 1.5em;
}
.aligncenter {
	display: block;
	clear: both;
	margin: 0 auto;
}*/

.screen-reader-text {
	clip: rect(1px, 1px, 1px, 1px);
	position: absolute !important;
}

img.wp-smiley {
	margin-bottom: 0; //reset
	margin-top: 0; //teset
	padding: 0; //reset
	border: none;
}

/* text alignment */
.text-left   {
	text-align: left; }

.text-right  {
	text-align: right; }

.text-center {
	text-align: left; }



/*---------------------------------------------------------
 Captions (_patterns.scss)
-------------------------------------------------------- */
.wp-caption {
	max-width: 100%;
	font-style: italic;
	line-height: 1.35;
	@include rem('margin-bottom', $base);
}

.wp-caption img[class*="wp-image-"] {
	display: block;
	margin: 1.2% auto 0;
	max-width: 98%;
}

.wp-caption-text,
.entry-thumbnail-caption,
.cycle-caption {
	font-style: italic;
	line-height: 1.35;	
	@include rem('font-size', 13px);
}
.wp-caption .wp-caption-text {
	@include rem('margin', $base/2 0);
	text-align: center; 
}

div.wp-video-shortcode {
	@include rem('margin-bottom', $base);
}


/*---------------------------------------------------------
 Predefined classes and selections (_utility.scss)
-------------------------------------------------------- */
/* utilities */
.clear {
	clear: both; }
	
.cf {
	@include clearfix; }

.ir {
	@include image-replace; }

.hidden {
	@include hidden; } 

.visuallyhidden {
	@include visuallyhidden; }

.invisible { //Hide visually and from screenreaders, but maintain layout
	visibility: hidden; }

.break {
	word-break: break-word;
	word-wrap: break-word; }

	
/* selections */
a:link {
	-webkit-tap-highlight-color: #e0edd2;
	-webkit-tap-highlight-color : rgb(223, 236, 209); } /*  highloght color for Safari iOS */

::-webkit-selection { 
	background : rgb(23,119,175); 
	color : rgb(250,250,250); 
	text-shadow : none; }

::-moz-selection { 
	background : rgb(23,119,175); 
	color : rgb(250,250,250); 
	text-shadow : none; }

::selection { 
	background : rgb(23,119,175); 
	color : rgb(250,250,250); 
	text-shadow : none; }



/*---------------------------------------------------------
 Google maps (_utility.scss)
-------------------------------------------------------- */
iframe[src*="google.com/maps"] {
	@include for(medium-screens) {
		height: 600px;
	}
	width: 100%;
	height: 300px;
}